#!/usr/bin/env bash
set -euo pipefail

# 要写入的 DNS 列表（你提供的顺序）
DNS_LIST=(
  "2606:4700:4700::1111"
  "2001:4860:4860::8888"
  "2001:4860:4860::8844"
  "1.1.1.1"
  "8.8.8.8"
  "8.8.4.4"
)

TIMESTAMP="$(date +%Y%m%d-%H%M%S)"
BACKUP="/etc/resolv.conf.bak.${TIMESTAMP}"

echo "== 一键修复 DNS =="
echo "备份当前 /etc/resolv.conf -> ${BACKUP}"
cp -a /etc/resolv.conf "${BACKUP}"

# Helper: join DNS_LIST with space (for nmcli) and comma (for resolvectl/systemd)
DNS_SPACE="$(printf "%s " "${DNS_LIST[@]}" | sed 's/ $//')"
DNS_COMMA="$(printf "%s," "${DNS_LIST[@]}" | sed 's/,$//')"

# Try method 1: systemd-resolved via resolvectl
if command -v resolvectl >/dev/null 2>&1; then
  echo "尝试使用 resolvectl（systemd-resolved）设置全局 DNS..."
  # Set global DNS servers
  if resolvectl dns 2>/dev/null | grep -q 'Global'; then
    # newer systemd has resolvectl dns --set-global? We'll do resolvectl dns --interface=lo style fallback:
    # Use 'resolvectl dns' on the link for each active link
    # Get list of links
    LINK_IDS=$(resolvectl link-status --no-pager 2>/dev/null | awk '/^[0-9]+:/{print $1}' || true)
    if [ -n "$LINK_IDS" ]; then
      for L in $LINK_IDS; do
        echo "  设置 link $L 的 DNS -> ${DNS_SPACE}"
        for D in "${DNS_LIST[@]}"; do
          resolvectl dns "$L" "$D" >/dev/null 2>&1 || true
        done
      done
    fi
    # Also set fallback/global
    echo "  设置 fallback/global DNS -> ${DNS_COMMA}"
    resolvectl domain "*" >/dev/null 2>&1 || true
    # Use resolvectl to set fallback (some systemd versions use 'resolvectl dns --set-default' isn't standard),
    # so we also write a systemd-resolved conf drop-in as a robust method below.
  else
    echo "  resolvectl 无法枚举 link，跳过 link 层级设置。"
  fi

  # Create a drop-in for systemd-resolved to ensure DNS preserved
  mkdir -p /etc/systemd/resolved.conf.d
  CONF_FILE="/etc/systemd/resolved.conf.d/custom-dns.conf"
  echo "生成 systemd-resolved drop-in: ${CONF_FILE}"
  {
    echo "[Resolve]"
    echo "DNS=${DNS_COMMA}"
    echo "FallbackDNS="
    echo "Domains="
    # 禁用 DNS Stub Listener（如果要让 /etc/resolv.conf 指向 /run/systemd/resolve/resolv.conf 则可不用改）
    # echo "DNSStubListener=no"
  } > "${CONF_FILE}"

  echo "重启 systemd-resolved 服务..."
  systemctl try-restart systemd-resolved.service || systemctl restart systemd-resolved.service || true
  sleep 1
  echo "使用 resolvectl status（简要）:"
  resolvectl status --no-pager | sed -n '1,60p' || true
  echo "resolvectl 步骤完成。"
  RESOLVECTL_DONE=1
else
  echo "系统中没有 resolvectl 命令，跳过 systemd-resolved 方法。"
  RESOLVECTL_DONE=0
fi

# Try method 2: NetworkManager via nmcli
if command -v nmcli >/dev/null 2>&1; then
  echo "尝试使用 nmcli（NetworkManager）设置所有激活连接的 DNS（会保留自动 IP，但覆盖 DNS）..."
  # 获取所有激活连接的 UUID 列表
  CONNS=$(nmcli -t -f UUID,NAME c show --active | cut -d: -f1 || true)
  if [ -n "$CONNS" ]; then
    for UUID in $CONNS; do
      echo "  为连接 $UUID 设置 DNS -> ${DNS_SPACE}"
      nmcli connection modify "$UUID" ipv4.ignore-auto-dns yes 2>/dev/null || true
      nmcli connection modify "$UUID" ipv6.ignore-auto-dns yes 2>/dev/null || true
      nmcli connection modify "$UUID" ipv4.dns "${DNS_COMMA}" 2>/dev/null || true
      nmcli connection modify "$UUID" ipv6.dns "${DNS_COMMA}" 2>/dev/null || true
      # 重新激活连接以使其生效
      nmcli connection up "$UUID" >/dev/null 2>&1 || true
    done
    echo "NetworkManager 步骤已完成（尝试重启 NetworkManager 以确保生效）。"
    systemctl restart NetworkManager.service || true
    NM_DONE=1
  else
    echo "未检测到激活的 NetworkManager 连接，跳过 nmcli 修改。"
    NM_DONE=0
  fi
else
  echo "系统中没有 nmcli（NetworkManager CLI），跳过 NetworkManager 方法。"
  NM_DONE=0
fi

# Method 3: 直接写入 /etc/resolv.conf（兜底）
RESOLV_CONF_CONTENT="# Generated by fix-dns.sh on ${TIMESTAMP}
# Preferred DNS servers (ordered)
"
for D in "${DNS_LIST[@]}"; do
  RESOLV_CONF_CONTENT+="nameserver ${D}\n"
done
RESOLV_CONF_CONTENT+="\n# End of file\n"

echo "如果以上方法都不生效，脚本将写入 /etc/resolv.conf 作为兜底。"
echo -e "${RESOLV_CONF_CONTENT}" > /etc/resolv.conf
echo "/etc/resolv.conf 已写入："
cat /etc/resolv.conf

# 提示是否设置 immutable，防止被 DHCP/NM 覆盖
echo
read -r -p "是否将 /etc/resolv.conf 设为只读不可更改以防止被覆盖？(y/N): " REPLY
REPLY=${REPLY:-N}
if [[ "$REPLY" =~ ^[Yy]$ ]]; then
  if command -v chattr >/dev/null 2>&1; then
    echo "设置 chattr +i /etc/resolv.conf（需要 root）..."
    chattr +i /etc/resolv.conf || echo "chattr +i 失败（可能不支持或没有权限）。"
    echo "注意：若要恢复可写，需要运行： chattr -i /etc/resolv.conf"
  else
    echo "系统没有 chattr，无法设置 immutable 标志。"
  fi
else
  echo "跳过设置 immutable。"
fi

# 最终重启/刷新网络相关服务以尽可能让设置生效
echo "尝试重启/刷新相关服务：systemd-resolved, NetworkManager, networking（如果存在）"
systemctl try-restart systemd-resolved.service || true
systemctl try-restart NetworkManager.service || true
if command -v systemctl >/dev/null 2>&1; then
  if systemctl list-units --type=service --all | grep -qi '^networking'; then
    systemctl try-restart networking.service || true
  fi
fi

echo
echo "==== 操作完成 ===="
echo "备份保存在： ${BACKUP}"
echo "当前 /etc/resolv.conf 内容："
cat /etc/resolv.conf
echo
echo "如果你的系统使用 DHCP 并且 NetworkManager / systemd-resolved 仍在覆盖，请考虑："
echo "  - 检查 NetworkManager 连接设置 (nmcli connection show <UUID>)"
echo "  - 检查 /etc/systemd/resolved.conf.d/custom-dns.conf 内容是否被覆盖"
echo "  - 若使用 cloud-init、dhclient 等，可能需要在对应配置中禁用自动 DNS"
echo
echo "如需我为你的具体发行版（例如 Debian/Ubuntu/CentOS/RHEL/Arch）生成更精确的版本，直接告诉我发行版名称与版本即可。"
